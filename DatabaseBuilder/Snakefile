pepfile: "project_config.yaml"
configfile: "config.yaml" 

tmpFolder=config["tempFolder"]
outputFolder=config["outputFolder"]
kSize=config["kSize"]




tmp=list(filter(lambda x:x.library=="short",pep.samples))
illuminaSamples=[s.sample_name for s in tmp]
samples=[(x.sample_name,x.file) for x in tmp]
samples=dict(samples)

kmcs=expand("{out}kmc/{experiment}.kmc_pre",out=outputFolder,experiment=illuminaSamples)
metagraphUnitigs=expand(outputFolder+"unitigs/{sample}.fasta.gz",sample=illuminaSamples)
annodbg=expand(outputFolder+"columns/{sample}.fasta.gz.column.annodbg",sample=illuminaSamples)
annodbgCounts=expand(outputFolder+"columns/{sample}.fasta.gz.column.annodbg.counts",sample=illuminaSamples)
histograms=expand(outputFolder+"histograms/{sample}.histo",sample=illuminaSamples)

def getFile(name):
    return samples[name]



rule all:
    input:
        outputFolder+"graph.dbg",
	outputFolder+"annotation.row_diff_int_brwt.annodbg",
	outputFolder+"annotation.relaxed.row_diff_int_brwt.annodbg",
	outputFolder+"graph.desc.tsv"



rule kmc:
    input: lambda wildcards: getFile(f"{wildcards.experiment}")         
    params:
        outPrefix=outputFolder +"kmc/{experiment}"
    output:
         pre=outputFolder +"kmc/{experiment}.kmc_pre",
	 suf=outputFolder +"kmc/{experiment}.kmc_suf",
	 lst=outputFolder +"kmc/{experiment}.lst",
    conda:
         "env.yaml"
    threads: 16
    resources:
        mem_mb=17000,cores=16
    log: outputFolder +"kmc/{experiment}.log"
    shell:
       	"""
      	mkdir -p {tmpFolder}$$/
	echo {input} |tr -s ' ' $'\n' > {output.lst}
	kmc -ci5 -t{threads} -k{kSize} -m16  @{output.lst} {params.outPrefix} {tmpFolder}$$/ &> {log}
	rm -rf {tmpFolder}$$/
        """



rule calculateHistogram:
    input: prefix=outputFolder+"kmc/{sample}.kmc_pre", suffix=outputFolder+"kmc/{sample}.kmc_suf"
    output:
         histogram=outputFolder+"histograms/{sample}.histo"
    params:
         kmcPrefix=outputFolder+"kmc/{sample}"
    conda:
         "env.yaml"
    threads: 1
    resources:
        mem_mb=3000,cores=1,mem_gb=2
    log: outputFolder+"histograms/{sample}.log"
    shell:
       	"""
	./computeHistogram -i {params.kmcPrefix} -m 1000 -o {output} &> {log}
        """

rule createGraphDescriptor:
    input:
         histograms = histograms,
	 unitigs= metagraphUnitigs
    params:
         labels =  illuminaSamples
    output:
         description=outputFolder+"graph.desc.tsv"
    conda:
         "env.yaml"
    threads: 1
    resources:
        mem_mb=3000,cores=1,mem_gb=2
    log: outputFolder+"graph.desc.tsv.log"
    shell:
       	"""
        echo {params.labels} | tr -s ' ' $'\n' > tmp1
        ls {input.histograms} | parallel --gnu -j1 -k "grep  'parameters' {{}} | cut -f3" > tmp2
	echo {input.unitigs}| tr -s ' ' $'\n' > tmp3
        paste -d'\t' tmp1 tmp2 tmp3 > {output.description}
	"""




rule kmc_to_clean_fasta:
    input: prefix=outputFolder+"kmc/{sample}.kmc_pre", suffix=outputFolder+"kmc/{sample}.kmc_suf"
    output:
         unitgs=outputFolder+"unitigs/{sample}.fasta.gz",
         counts=outputFolder+"unitigs/{sample}.kmer_counts.gz",
    params:
         outputPrefix=outputFolder+"unitigs/{sample}"
    conda:
         "env.yaml"
    threads: 8
    resources:
        mem_mb=20000,cores=8,mem_gb=18
    log: outputFolder+"unitigs/{sample}.log"
    shell:
       	"""
	    mkdir  -p {tmpFolder}$$/

	    metagraph build -v \
            -k {kSize} \
            --mode canonical \
            --count-kmers --count-width 32 \
            --mem-cap-gb {resources.mem_gb} \
            --disk-swap  {tmpFolder}$$/\
            -p {threads} \
            -o  {tmpFolder}$$/{wildcards.sample}\
            {input.suffix}  &> {log}

            metagraph clean -v \
            --to-fasta --primary-kmers \
            --smoothing-window 1 \
            -p {threads} \
            -o {params.outputPrefix} \
            {tmpFolder}$$/{wildcards.sample}.dbg  &>> {log} \
         
            rm -rf {tmpFolder}$$/
        """



 



rule metagraph_buildMainGraph:
    input: metagraphUnitigs
    output:
         graph=outputFolder+"graph.dbg"
    params:
         outputPrefix=outputFolder+"graph"
    conda:
         "env.yaml"
    threads: 32
    resources:
        mem_mb=12000,cores=32,mem_gb=10
    log: outputFolder+"buildMainGraphlog"
    shell:
       	"""
	    mkdir  -p {tmpFolder}$$/

            metagraph build -v \
            -k {kSize} \
            --mode canonical  \
            --mem-cap-gb {resources.mem_gb} \
            --disk-swap {tmpFolder}$$/  \
            -p {threads} \
            -o {tmpFolder}$$/graph_canonical \
            {input} &> {log}

            metagraph transform -v \
            --to-fasta --primary-kmers \
	    -p {threads} \
            -o  {tmpFolder}$$/graph_primary \
            {tmpFolder}$$/graph_canonical.dbg &>> {log}

            rm {tmpFolder}$$/graph_canonical.dbg


            metagraph build -v \
            -k {kSize} \
            --mode primary \
            --mem-cap-gb {resources.mem_gb} \
            --disk-swap {tmpFolder}$$/ \
            -p {threads} \
            -o {params.outputPrefix} \
            {tmpFolder}$$/graph_primary.fasta.gz  &>> {log}
	    
	    rm -rf {tmpFolder}$$/
        """



 
rule compressGraph:
    input: "{prefix}graph.dbg"
    output:
         graph="{prefix}graph.small.dbg"
    params:
         outputPrefix="{prefix}graph.small"
    conda:
         "env.yaml"
    threads: 32
    resources:
        mem_mb=12000,cores=32,mem_gb=10
    log: "{prefix}graph.small.log"
    shell:
       	"""
	metagraph transform -v \
            --state small \
            -o {params.outputPrefix} \
            -p {threads} \
	    {input} &> {log}
	"""



rule createAnnotationColumns:
    input:
         unitigs=metagraphUnitigs,
         graph=outputFolder+"graph.dbg"
    output:
         annodbg,annodbgCounts
    params:
         outputPrefix=outputFolder+"columns/"
    conda:
         "env.yaml"
    threads: 32
    resources:
        mem_mb=12000,cores=32,mem_gb=10
    log: outputFolder+"createAnnotationColumns.log"
    shell:
       	"""
	metagraph annotate -v \
                -i {input.graph} \
                --anno-filename \
                --separately \
                --count-kmers --count-width 32 \
                -o {params.outputPrefix} \
                -p {threads} \
                {input.unitigs} &> {log}
	"""


rule optimizeAnnotationColumns:
    input:
         columns=annodbg,
         graph=outputFolder+"graph.dbg"
    output:
         outputFolder+"annotation.row_diff_int_brwt.annodbg",
	 outputFolder+"annotation.relaxed.row_diff_int_brwt.annodbg"
    params:
         rowDiffPrefix=outputFolder + "rowDiff/",
	 outputPrefix=outputFolder + "annotation"
    conda:
         "env.yaml"
    threads: 32
    resources:
        mem_mb=120000,cores=32,mem_gb=100
    log: outputFolder+"optimizeAnnotationColumns.log"
    shell:
       	"""
	mkdir  -p {tmpFolder}$$/
	mkdir -p {params.rowDiffPrefix}

	metagraph transform_anno -v \
            --anno-type row_diff --count-kmers \
            --row-diff-stage 0 \
            --mem-cap-gb {resources.mem_gb} \
            --disk-swap {tmpFolder}$$/ \
            -i {input.graph} \
            -o {params.rowDiffPrefix}out \
            -p {threads} \
	    {input.columns} &> {log}
    
	metagraph transform_anno -v \
            --anno-type row_diff --count-kmers \
            --row-diff-stage 1 \
            --mem-cap-gb {resources.mem_gb} \
            --disk-swap {tmpFolder}$$/ \
            -i {input.graph} \
            -o {params.rowDiffPrefix}out \
            -p {threads} \
	    {input.columns} &>> {log}


        metagraph transform_anno -v \
            --anno-type row_diff --count-kmers \
            --row-diff-stage 2 \
            --mem-cap-gb {resources.mem_gb} \
            --disk-swap {tmpFolder}$$/ \
            -i {input.graph} \
            -o {params.rowDiffPrefix}out \
            -p {threads} \
	    {input.columns} &>> {log}


        find {params.rowDiffPrefix} -name \"*.column.annodbg\" \
         | metagraph transform_anno -v \
            --anno-type row_diff_int_brwt \
            --greedy --fast --subsample 1000000 \
            -i {input.graph} \
            -o {params.outputPrefix} \
            -p {threads} --parallel-nodes 10  &>> {log}


        metagraph relax_brwt -v \
            -p {threads} \
            --relax-arity 32 \
            -o {params.outputPrefix}.relaxed \
            {params.outputPrefix}.row_diff_int_brwt.annodbg  &>> {log}

	    rm -rf {tmpFolder}$$/
	"""


